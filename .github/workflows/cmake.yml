name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  POSTGRES_VERSION: 14

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - name : Install lua-5-3-5-build
      uses : actions/checkout@v3
      with :
        repository: Tekenlight/lua-5-3-5-build
        path: lua-5-3-5
    - name : Install SSL
      run: sudo apt-get -y install libssl-dev
    - name : Install lua
      uses: actions/checkout@v3
      with:
        repository: Tekenlight/lua
        path: lua-5-3-5/src
    - name: check lua-5-3-5
      run: |
        pwd
        ls -l lua-5-3-5
    
    - name : check lua
      run: |
        pwd
        ls -l lua-5-3-5/src
      
    - name: Run lua build
      run: |
        cd lua-5-3-5
        sudo apt-get update
        sudo apt-get install build-essential libreadline-dev
        make linux
        sudo make install
      
    - uses: actions/checkout@v3
    - name : Install Postgresql
      run : |
        #sudo apt-get -y install wget ca-certificates bash-completion
        #wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
        sudo apt-get update
        sudo apt-get -y install postgresql-server-dev-14 postgresql-client-14
    - name : Fetch customized libev
      uses: actions/checkout@v3
      with:
        repository: Tekenlight/libev
        path: libev
    - name : Build and install libev
      run: |
        cd libev
        autoreconf -i
        ./configure
        make
        sudo make install
  
    - name : Fetch efio
      uses: actions/checkout@v3
      with:
        repository: Tekenlight/efio
        path: efio
    - name : Build and install efio
      run: |
        cd efio
        cmake -B ${{github.workspace}}/efio/cmake-build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        cmake --build ${{github.workspace}}/efio/cmake-build --config ${{env.BUILD_TYPE}}
        sudo cmake --install ${{github.workspace}}/efio/cmake-build

    - name : Fetch customized http-parser
      uses: actions/checkout@v3
      with:
         repository: Tekenlight/http-parser
         path: http-parser
    - name : Build and install http-parser
      run: |
        cd http-parser
        make
        sudo make install   
        
    - name : Fetch hiredis
      uses: actions/checkout@v3
      with:
        repository: Tekenlight/hiredis
        path: hiredis
    - name : Build and install hiredis
      run: |
        cd hiredis
        cmake -B ${{github.workspace}}/hiredis/cmake-build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        cmake --build ${{github.workspace}}/hiredis/cmake-build --config ${{env.BUILD_TYPE}}
        sudo cmake --install ${{github.workspace}}/hiredis/cmake-build
 
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/cmake-build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DPG_VERSION=${{env.POSTGRES_VERSION}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/cmake-build --config ${{env.BUILD_TYPE}}
      #run: echo HI

    - name: Test
      working-directory: ${{github.workspace}}/cmake-build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

